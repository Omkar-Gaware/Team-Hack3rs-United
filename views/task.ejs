<% layout('/layouts/boilerplate') %>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Arial', sans-serif;
    }

    body, html {
        height: 100%;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #f0f0f0;
        background-image: url("https://static.vecteezy.com/system/resources/previews/033/502/006/non_2x/vintage-pocket-watch-on-magic-background-time-concept-ai-generated-free-photo.jpeg");
        background-size: cover;
        background-position: center;
    }

    .container {
        width: 100%;
        max-width: 800px;
        background: transparent;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    h1 {
        font-size: 28px;
        color: #f9f6f6;
        margin-bottom: 15px;
    }

    /* Voice Assistant button at the middle top */
    .voice {
        position: absolute;
        top: 10px; /* Adjust vertical position */
        left: 50%; /* Horizontally center */
        transform: translateX(-50%); /* Adjust the center positioning */
        z-index: 10;
    }

    .task-list {
        display: flex;
        flex-wrap: wrap;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-top: 20px;
    }

    .task-item {
        background: #ffffff;
        border-radius: 8px;
        padding: 15px;
        text-align: center;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

    .task-item:hover {
        transform: translateY(-5px);
    }

    .task-item input[type="checkbox"] {
        transform: scale(1.3);
        margin-bottom: 10px;
    }

    .task-item label {
        display: block;
        font-size: 16px;
        color: #333;
        margin-bottom: 5px;
    }

    .task-item input[type="time"] {
        width: 100%;
        padding: 6px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 14px;
        text-align: center;
    }

    .btn {
        display: inline-block;
        padding: 12px 20px;
        font-size: 16px;
        font-weight: bold;
        color: white;
        background: #007bff;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        margin-top: 20px;
        transition: 0.3s;
    }

    .btn:hover {
        background: #0056b3;
    }
</style>

<body>
    <div class="voice">
        <button type="button" class="btn btn-primary" onclick="speakText()">Voice Assistant</button>
    </div>

    <div class="container">
        <h1>Daily Tasks for You</h1>

        <div class="task-list">
            <div class="task-item">
                <input type="checkbox" id="morningStretch">
                <label for="morningStretch">Morning Stretch</label>
                <input type="time" id="timeMorningStretch">
            </div>

            <div class="task-item">
                <input type="checkbox" id="personalHygiene">
                <label for="personalHygiene">Personal Hygiene</label>
                <input type="time" id="timePersonalHygiene">
            </div>

            <div class="task-item">
                <input type="checkbox" id="mealPreparation">
                <label for="mealPreparation">Meal Preparation</label>
                <input type="time" id="timeMealPreparation">
            </div>

            <div class="task-item">
                <input type="checkbox" id="mentalStimulation">
                <label for="mentalStimulation">Mental Stimulation</label>
                <input type="time" id="timeMentalStimulation">
            </div>

            <div class="task-item">
                <input type="checkbox" id="socialConnection">
                <label for="socialConnection">Social Connection</label>
                <input type="time" id="timeSocialConnection">
            </div>

            <div class="task-item">
                <input type="checkbox" id="eveningRelaxation">
                <label for="eveningRelaxation">Evening Relaxation</label>
                <input type="time" id="timeEveningRelaxation">
            </div>
        </div>

        <button class="btn" onclick="saveTimes()">Save Times</button>
    </div>

    <script>
        // Request permission for notifications
        if (Notification.permission !== 'granted') {
            Notification.requestPermission();
        }

        function saveTimes() {
            const tasks = [
                { task: 'Morning Stretch', time: document.getElementById('timeMorningStretch').value, checkbox: document.getElementById('morningStretch') },
                { task: 'Personal Hygiene', time: document.getElementById('timePersonalHygiene').value, checkbox: document.getElementById('personalHygiene') },
                { task: 'Meal Preparation', time: document.getElementById('timeMealPreparation').value, checkbox: document.getElementById('mealPreparation') },
                { task: 'Mental Stimulation', time: document.getElementById('timeMentalStimulation').value, checkbox: document.getElementById('mentalStimulation') },
                { task: 'Social Connection', time: document.getElementById('timeSocialConnection').value, checkbox: document.getElementById('socialConnection') },
                { task: 'Evening Relaxation', time: document.getElementById('timeEveningRelaxation').value, checkbox: document.getElementById('eveningRelaxation') }
            ];

            tasks.forEach(task => {
                if (task.time) {
                    setReminder(task);
                }
            });
        }

        function setReminder(task) {
            if (!task.time) return;

            const [hour, minute] = task.time.split(":").map(Number);
            if (isNaN(hour) || isNaN(minute)) return;

            const currentTime = new Date();
            const taskDateTime = new Date();
            taskDateTime.setHours(hour, minute, 0);

            const timeDiff = taskDateTime - currentTime;

            if (timeDiff > 0) {
                setTimeout(() => {
                    if (!task.checkbox.checked) {
                        repeatVoiceReminder(task);
                    }
                }, timeDiff);
            }
        }

        function repeatVoiceReminder(task) {
            const intervalId = setInterval(() => {
                if (!task.checkbox.checked) {
                    const msg = new SpeechSynthesisUtterance();
                    msg.text = `Reminder: It's time to complete your task "${task.task}". Please check the box once completed.`;
                    msg.lang = 'en-US';
                    window.speechSynthesis.speak(msg);
                } else {
                    clearInterval(intervalId);
                }
            }, 10000);
        }
    </script>

</body>
</html>
